#!/usr/bin/env ruby
#
# zu2bf - Zu compiler
#
$LOAD_PATH << File.join(File.dirname(__FILE__), "lib/")
require 'textgraph'
require 'brainfuck'

class Zu2Bf
  def initialize
    @debug_mode = false
  end
  attr_accessor :debug_mode

  def compile(src)
    tg = TextGraph.parse(src)
    wr = Brainfuck.writer
    wr.debug_mode = @debug_mode

    table = Array.new

    tg.cells.each_with_index {|cell,i|
      nexts = tg.links.find_all{|from, to| from == i}
      inst = cell.content.strip
      nexts.size.times {|t| inst += ", #{1+nexts[t][1]}"}
      table[1+i] = inst
    }
    optimize wr.node_switch(table)
  end

  def optimize(code)
    return "" unless code and code.length > 0
    begin
      last_length = code.length
      code.gsub!(/<>/,"")
      code.gsub!(/></,"")
    end while code.length < last_length
    code.sub!(/[-+<>,]*\Z/, "")
  end
end

def fold_string(orig,line_length)
  lines = ((orig.length + (line_length-1)) / line_length).to_i
  s = ""
  (lines - 1).times{|l|
    s += orig[line_length*l .. line_length*l + (line_length-1)] + "\n"
  }
  s += orig[line_length*(lines-1) .. -1] + "\n" if line_length*(lines-1) < orig.length
  s
end

if ARGV.size==0
  puts "usage: zu2bf <scriptfile>"
else
  if ARGV[0][0] == 0x2D
    options = ARGV[0][1 .. -1]
    ARGV.shift
  end
  options ||= ""

  compiler = Zu2Bf.new
  compiler.debug_mode = true if options =~ /d/

  bfcode = compiler.compile(ARGF.read)

  case options
  when /r/ # run
    bf = Brainfuck.VM
    bf.load bfcode
    bf.run
  when /l/ # list
    bf = Brainfuck.VM
    bf.load bfcode
    bf.list
  when /d/ # debug
    # nothign
  when /n/ # raw
    print bfcode
  else
    print fold_string(bfcode,80)
  end
end
